You are a senior full-stack developer with deep expertise in React + TypeScript, TailwindCSS, and REST/GraphQL data pipelines. You are working on a web app which has three sectors (conflictwatch, pharmawatch, and energywatch)
Current issues to fix
Layout problems


Text in cards overflows; long country names and casualty numbers break the card width.


The grid of cards does not resize gracefully on tablets and mobile.


Incorrect data


The ConflictWatch page is mistakenly rendering stock-market data meant for PharmaWatch and EnergyWatch.


The correct endpoint is /api/conflicts (sample response below).


Navigation / UX


Users find it hard to scan because cards are the same color as the background, and critical figures aren’t visually highlighted.


Your tasks
Refactor layout


Use a responsive CSS grid (Tailwind grid-cols-…) that shows 4 cards on ≥1280 px, 2 on ≥768 px, and 1 on smaller screens.


Ensure cards have overflow-hidden, sensible padding, and text truncation (truncate + tooltip on hover).


Fix data source


Remove any reference to pharmaData or energyData in ConflictWatch.tsx.


Fetch data with useSWR from /api/conflicts.


Validate shape with a Conflict TypeScript interface:


ts
CopyEdit
interface Conflict {
  id: string;
  country: string;
  activeSince: string;   // ISO date
  fatalitiesYTD: number;
}


Improve readability


Give each card a subtle shadow and a white background (bg-white shadow-md rounded-xl p-4).


Highlight fatalitiesYTD in a bold, larger font; color numbers red if >10 000.


Add a sticky header with a short filter input (by country name).


Unit tests


Add Jest/React Testing Library tests that mock /api/conflicts and assert that only conflict data renders.


Test that long names are truncated and tooltips appear.


Acceptance criteria
All cards stay within their containers at 320 px–1920 px widths.


Network tab shows only one call to /api/conflicts.


Jest tests pass: npm test -- --watchAll=false returns green.


Lighthouse mobile performance ≥ 90 and accessibility ≥ 95.


Sample /api/conflicts response
json
CopyEdit
[
  {
    "id": "gaza-2025",
    "country": "Palestinian Territories – Gaza",
    "activeSince": "2023-10-07",
    "fatalitiesYTD": 14987
  },
  {
    "id": "ukraine-2025",
    "country": "Ukraine",
    "activeSince": "2014-02-20",
    "fatalitiesYTD": 8734
  }
]

Return only the updated ConflictWatch.tsx (or equivalent) plus any new component or test files you create, with clear inline comments describing key changes.
